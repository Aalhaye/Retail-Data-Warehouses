-- Example Queries for Statistics

-- 1. Analyze the number of branches by shopping mall and location
-- This query shows how many branches are located in each shopping mall and location.
SELECT branch_id, shopping_mall, location, COUNT(*) AS num_branches
FROM dw.branches_dimension
GROUP BY branch_id, shopping_mall, location;

-- 2. Analyze the number of products in each category
-- This query counts how many products are available in each category.
SELECT category_id, category, COUNT(*) AS num_products
FROM dw.categories_dimension
GROUP BY category_id, category;

-- 3. Analyze customer demographics (average age and total customers by gender)
-- This query calculates the average age and total number of customers, grouped by gender.
SELECT customer_id, gender, AVG(age) AS avg_age, COUNT(*) AS total_customers
FROM dw.customers_dimension
GROUP BY customer_id, gender;

-- 4. Analyze total sales for each product
-- This query calculates the total quantity sold and total revenue for each product.
SELECT product_id, SUM(quantity) AS total_quantity, SUM(price * quantity) AS total_sales
FROM dw.invoices_fact
GROUP BY product_id;

-- 5. Analyze total revenue for each category
-- This query sums up the revenue for each category, showing which categories have the highest sales.
SELECT category, SUM(price * quantity) AS total_revenue
FROM dw.invoices_fact
GROUP BY category;

-- 6. Display top 5 highest revenue-generating invoices
-- This query ranks invoices by total revenue, displaying the top 5 highest sales invoices.
SELECT invoice_no, SUM(price * quantity) AS total_revenue
FROM dw.invoices_fact
GROUP BY invoice_no
ORDER BY total_revenue DESC
LIMIT 5;

-- 7. Total sales per branch (revenue generated by each branch)
-- This query calculates the total sales revenue for each branch.
SELECT branch_id, SUM(price * quantity) AS total_revenue
FROM dw.invoices_fact
GROUP BY branch_id;

-- 8. Monthly sales trends
-- This query calculates total sales per month (for each year), useful for identifying seasonal trends.
SELECT EXTRACT(YEAR FROM invoice_date) AS year, EXTRACT(MONTH FROM invoice_date) AS month,
       SUM(price * quantity) AS total_monthly_revenue
FROM dw.invoices_fact
GROUP BY year, month
ORDER BY year, month;
